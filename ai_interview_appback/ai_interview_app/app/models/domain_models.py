# app/models/domain_models.py - Internal domain models

from typing import List, Dict, Any, Optional
from pydantic import BaseModel, Field # Using Pydantic for structure, validation, and potentially serialization

# Redefine InterviewState here as its primary definition, potentially without the WebSocket field
# (WebSocket is not serializable and shouldn't be part of a model intended for persistence).
# The InterviewState in core/interview_state.py will then extend or use this.
class InterviewStateBase(BaseModel):
    """
    Base model for the mutable state of a single interview session.
    Suitable for serialization/persistence.
    """
    id: str = Field(..., description="Unique identifier for the interview session.")
    job_description_id: str
    resume_id: str
    interview_plan: Dict[str, Any] = Field({}, description="Structured plan/topics derived from pre-analysis.")

    # --- Conversation State ---
    # Store full turns including user input and AI response for history
    conversation_history: List[Dict[str, Any]] = Field([], description="History of turns for LLM context.")
    # Example format: [{'role': 'user', 'content': '...'}, {'role': 'assistant', 'content': '...'}]
    transcript: str = Field("", description="Full accumulated transcript of the interview (for analysis/display).")


    # --- Real-time Processing State ---
    # Buffer for accumulating transcription chunks while user is speaking
    current_chunk_buffer: str = Field("", description="Buffer for transcription chunks between pauses.")
    # Store the latest draft generated by the incremental LLM task
    latest_llm_draft: str = Field("", description="Latest non-final response draft from incremental processing.")
    # Timestamp of the last chunk received (useful for pause detection logic)
    last_chunk_timestamp: Optional[float] = None

    # --- Analysis State ---
    # Placeholder for tracking analysis progress or results related to this interview
    # post_analysis_status: str = "pending" # e.g., pending, running, completed, failed
    # post_analysis_result_id: Optional[str] = None # ID referencing the saved analysis result


# The core/interview_state.py file will use this as a base and add non-serializable fields like 'websocket'.
# class InterviewState(InterviewStateBase):
#     websocket: Optional[WebSocket] = Field(None, exclude=True) # Exclude from serialization


# Example Domain Models for parsed documents or analysis results (if needed)
# class ParsedDocument(BaseModel):
#     id: str
#     type: str # "job_description" or "resume"
#     original_filename: str
#     content: str # The extracted text

# class DocumentAnalysis(BaseModel):
#      id: str # Could be same as doc_id
#      doc_id: str
#      type: str # "pre_interview_jd", "pre_interview_resume", "post_interview"
#      result: Dict[str, Any] # The structured analysis data